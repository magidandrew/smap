
int get_key(int counts, int de) {
    int my_num = key_test(counts,de);
    return my_num;
}


int character_location(list int x,int y){
    int j = 0;
    int i = 0;
	for(i=0;i<26;i=i+1) {
        if(x[i]==y) {
            return i;
        }
    }
    return j;
	
}


list int rotor_shift(list int rotor_input,int position){
	int character_holder=rotor_input[0];
    int k=0;
    int l=0;
    int m=0;
	for(k=0;k<position;k=k+1){
		character_holder=rotor_input[0];
        for(l=0;l<25;l=l+1){
            m = l + 1;
			rotor_input[l]=rotor_input[m];
			if(l==24){
				rotor_input[25]=character_holder;
			}
		}
	}
    return rotor_input;
	
}

int return_cor_int(string what_message, int what_index) {
    int res = corresponding_int(what_message,what_index);
    return res;
}


list int initialize_input_text(string message_user,list int input_list_message) {
    
    int message_length_input = message_user.length;
    int message_length_init = 0;
    int current_int_val = 0;

    for(message_length_init = 0; message_length_init < message_length_input;message_length_init=message_length_init+1) {
        current_int_val = return_cor_int(message_user,message_length_init);
        input_list_message[message_length_init] = current_int_val;
    }

    return input_list_message;
}


int character_location_status(list int xx, int yy) {

    int my_response = character_location(xx,yy);

    return my_response;

}

int my_modulus_result(int base) {
    int modulus_results = modulus_operation(base,26);
    return modulus_results;
}

int rotor_direction_output(int input_output_char_loc,list int rotor_one_input_direct,list int rotor_one_output_direct,list int rotor_two_input_direct,list int rotor_two_output_direct,list int rotor_three_input_direct,list int rotor_three_output_direct){
		
        int index_reverse = 0;
		int characher_location_holder=input_output_char_loc;
		int characher_location_holder_two = 0;
		list int reflector= [0,1,2,3,4,5,6,3,8,9,10,6,12,10,12,8,4,1,5,19,2,21,21,9,0,19];

		
        //Getting character on rotor3 input tray
        characher_location_holder=character_location(rotor_three_input_direct,rotor_three_output_direct[characher_location_holder]);
        

        //Getting character on rotor2 input tray
        characher_location_holder=character_location(rotor_two_input_direct,rotor_two_output_direct[characher_location_holder]);
            
        //Getting character on rotor1 input tray
        characher_location_holder=character_location(rotor_one_input_direct,rotor_one_output_direct[characher_location_holder]);

        //Verified till above
        
        //Getting the reflected elment and the other reflected value
        
        for(index_reverse=0;index_reverse<26;index_reverse=index_reverse+1){
            if(characher_location_holder==index_reverse){
                    
            }
            else{
                if(reflector[characher_location_holder]==reflector[index_reverse]){
                    characher_location_holder_two=index_reverse;
                }
            }
        }
        
        //Getting character on rotor1 output tray
        characher_location_holder=character_location(rotor_one_output_direct,rotor_one_input_direct[characher_location_holder_two]);
        //Getting character on rotor2 output tray
        characher_location_holder=character_location(rotor_two_output_direct,rotor_two_input_direct[characher_location_holder]);
        //Getting character on rotor3 output tray
        characher_location_holder=character_location(rotor_three_output_direct,rotor_three_input_direct[characher_location_holder]);
        //Cipher Character
		return characher_location_holder;
		
		
}



list int encryption_decryption(list int rotor_one_e_input,list int rotor_one_e_output,list int rotor_two_e_input,list int rotor_two_e_output,list int rotor_three_e_input,list int rotor_three_e_output, list int text, int length_input_text){
	
	int modulus_result = 0;
    int modulus_result_t = 0;
    int char_loc_holder = 0;
	int count_rotor_one=0;
    int count_rotor_two=0;
    int count_rotor_three=0;
	int text_len = length_input_text;
    int loop_counter_e_d = 0;
    list int input_output_char = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    list int cipher_output_character = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];

    
    for(loop_counter_e_d=0;loop_counter_e_d<text_len;loop_counter_e_d=loop_counter_e_d+1) {
        
        char_loc_holder = character_location_status(input_output_char, text[loop_counter_e_d]);
        rotor_shift(rotor_three_e_input,1);
        rotor_shift(rotor_three_e_output,1);
        
        count_rotor_three = count_rotor_three + 1;
        
        if(count_rotor_three>0) {
            modulus_result = my_modulus_result(count_rotor_three);
            if(modulus_result == 0) {
                rotor_shift(rotor_two_e_input,1);
			    rotor_shift(rotor_two_e_output,1);
                count_rotor_two = count_rotor_two + 1;
                
                if(count_rotor_two>0) {
                    modulus_result_t = my_modulus_result(count_rotor_two);
                    if(modulus_result_t == 0) {
                        rotor_shift(rotor_one_e_input,1);
                        rotor_shift(rotor_one_e_output,1);
                        count_rotor_one = count_rotor_one + 1;  
                    }
                    
                }

            }

        }


        char_loc_holder=rotor_direction_output(char_loc_holder,rotor_one_e_input,rotor_one_e_output,rotor_two_e_input,rotor_two_e_output,rotor_three_e_input,rotor_three_e_output);
        
        cipher_output_character[loop_counter_e_d]=input_output_char[char_loc_holder];

    }

	return cipher_output_character;
	
}


int scoreTextCaller(list int messages_score, int lens) {

    int what_scorez = 0;

    int actual_scor = 0;

    list int Plaintext = [25,4,17,14,18,8,23,7,20,13,3,17,4,4,3,7,14,20,17,18,22,4,0,19,7,4,17,19,14,3,0,24,8,18,2,11,4,0,17,17,0,8,13,8,13,19,7,4,4,21,4,13,8,13,6,7,4,8,11,7,8,19,11,4,17];
    //int text_access = 0;
    //int message_access = 0;

    for(what_scorez=0;what_scorez<lens;what_scorez=what_scorez+1) {
        
        
        if(Plaintext[what_scorez] == messages_score[what_scorez]) {
            actual_scor = actual_scor + 1;
            //print("YES")
        }
        
    }
    
    
    return actual_scor;
}


int main() {

    
    int cryptanalyze_counter_one = 0;
    int cryptanalyze_counter_two = 0;

    int key_zero = 0;
    int key_one = 0;
    int key_two = 0;

    int ring_zero = 0;
    int ring_one = 0;
    int ring_two = 0;

    int final_output_counter = 0;
    int location_on_initialization_array = 0;
    int plugboard_input_count = 0;
    int some_counter = 0;
    list int temp = [1];
    list int input_text = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
    list char messagez = "WFORESTOSATXOFEGETKLEKNUXZDOAXLHMCSESQAEHAUUSJAHQUYDSRUIHSPDOXVPH";
    int scoring = 0;
    int scoring_counter = 0;
    int length_input = stringLength(messagez);


    //ToDo: Define the key -> SIG (Rotor) PMP (Ring)
    list int key = [18,8,6];
    list int ring_setting = [15,12,15];

    //ToDo: Rotor 3 initialize
    list int rotor_three_out = [1,3,5,7,9,11,2,15,17,19,23,21,25,13,24,4,8,22,6,0,10,12,20,18,16,14];
    list int rotor_three_in = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];


    //ToDo: Rotor 2 initialize
    list int rotor_two_out = [0,9,3,10,18,8,17,20,23,1,11,7,22,19,12,2,16,6,25,13,15,24,5,21,14,4];
    list int rotor_two_in = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];

    //ToDo: Rotor 1 initialize
    list int rotor_one_out = [4,10,12,5,11,6,3,16,21,25,13,19,14,22,24,7,23,20,18,15,0,8,1,17,2,9];
    list int rotor_one_in = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];


    //ToDo: Shift the inputs based on key and ring settings

    for(cryptanalyze_counter_one;cryptanalyze_counter_one<17576;cryptanalyze_counter_one=cryptanalyze_counter_one+1) {

        for(cryptanalyze_counter_two;cryptanalyze_counter_two<17576;cryptanalyze_counter_two=cryptanalyze_counter_two+1) {
            
            ring_zero = get_key(cryptanalyze_counter_one,0);
            ring_one = get_key(cryptanalyze_counter_one,1);
            ring_two = get_key(cryptanalyze_counter_one,2);
            ring_setting = [ring_zero,ring_one,ring_two];
            

            key_zero = get_key(cryptanalyze_counter_one,0);
            key_one = get_key(cryptanalyze_counter_one,1);
            key_two = get_key(cryptanalyze_counter_one,2);
            key = [key_zero,key_one,key_two];

            //For Rotor - I
            location_on_initialization_array=character_location(rotor_one_in,key[0]);
            rotor_one_in = rotor_shift(rotor_one_in,location_on_initialization_array);
            

            location_on_initialization_array=character_location(rotor_one_out,ring_setting[0]);
            rotor_one_out = rotor_shift(rotor_one_out,location_on_initialization_array);
            
            
            //For Rotor - II
            location_on_initialization_array=character_location(rotor_two_in,key[1]);
            rotor_two_in = rotor_shift(rotor_two_in,location_on_initialization_array);
            

            location_on_initialization_array=character_location(rotor_two_out,ring_setting[1]);
            rotor_two_out = rotor_shift(rotor_two_out,location_on_initialization_array);
            

            //For Rotor - III
            location_on_initialization_array=character_location(rotor_three_in,key[2]);
            rotor_three_in = rotor_shift(rotor_three_in,location_on_initialization_array);
            
            location_on_initialization_array=character_location(rotor_three_out,ring_setting[2]);
            rotor_three_out = rotor_shift(rotor_three_out,location_on_initialization_array);

            

            //ToDo: Initialize the message
            input_text = initialize_input_text(messagez,input_text);


            //ToDo: Initialize the encryption_decryption function
            temp = encryption_decryption(rotor_one_in,rotor_one_out,rotor_two_in,rotor_two_out,rotor_three_in,rotor_three_out,input_text,length_input);
            
            scoring = scoreTextCaller(temp,length_input);

            if(scoring_counter < scoring) {
                scoring_counter = scoring;
                print("Potential score: ");
                print(scoring_counter);
                print("Potential text: ");
                for(final_output_counter=0;final_output_counter<length_input;final_output_counter=final_output_counter+1) {
                    corresponding_char(temp[final_output_counter]);
                }


            }

            

        }

    }

    



    return 0;
}