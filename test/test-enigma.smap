//Used: i,j,k,l,m
//ToDo: Change the rotor_shift tushar pushed
int character_location(list int x,int y){
    int j = 0;
    int i = 0;
	for(i=0;i<26;i=i+1) {
        if(x[i]==y) {
            return i;
        }
    }
    return j;
	
}


list int rotor_shift(list int rotor_input,int position){
	int character_holder=rotor_input[0];
    int k=0;
    int l=0;
    int m=0;
	for(k=0;k<position;k=k+1){
		character_holder=rotor_input[0];
        for(l=0;l<25;l=l+1){
            m = l + 1;
			rotor_input[l]=rotor_input[m];
			if(l==24){
				rotor_input[25]=character_holder;
			}
		}
	}
    
    return rotor_input;
	
}



list int encryption_decryption(list int rotor_one_e_input,list int rotor_one_e_output,list int rotor_two_e_input,list int rotor_two_e_output,list int rotor_three_e_input,list int rotor_three_e_output, list int text){
	
	
	return rotor_one_e_input;
	
}





int main() {

    int location_on_initialization_array = 0;
    int plugboard_input_count = 0;
    list int temp = [1];
    list int input_text = [1];




    //ToDo: Define the key -> SIG (Rotor) PMP (Ring)
    list int key = [18,8,6];
    list int ring_setting = [15,12,15];

    //ToDo: Rotor 3 initialize
    list int rotor_three_out = [1,3,5,7,9,11,2,15,17,19,23,21,25,13,24,4,8,22,6,0,10,12,20,18,16,14];
    list int rotor_three_in = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];


    //ToDo: Rotor 2 initialize
    list int rotor_two_out = [0,9,3,10,18,8,17,20,23,1,11,7,22,19,12,2,16,6,25,13,15,24,5,21,14,4];
    list int rotor_two_in = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];

    //ToDo: Rotor 1 initialize
    list int rotor_one_out = [4,10,12,5,11,6,3,16,21,25,13,19,14,22,24,7,23,20,18,15,0,8,1,17,2,9];
    list int rotor_one_in = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];


    //ToDo: Shift the inputs based on key and ring settings

    //For Rotor - I
    location_on_initialization_array=character_location(rotor_one_in,key[0]);
    rotor_one_in = rotor_shift(rotor_one_in,location_on_initialization_array);

    location_on_initialization_array=character_location(rotor_one_out,ring_setting[0]);
    rotor_one_out = rotor_shift(rotor_one_out,location_on_initialization_array);
    
    //For Rotor - II
    location_on_initialization_array=character_location(rotor_two_in,key[1]);
    rotor_two_in = rotor_shift(rotor_two_in,location_on_initialization_array);

    location_on_initialization_array=character_location(rotor_two_out,ring_setting[1]);
    rotor_two_out = rotor_shift(rotor_two_out,location_on_initialization_array);

    //For Rotor - III
    location_on_initialization_array=character_location(rotor_three_in,key[2]);
    rotor_three_in = rotor_shift(rotor_three_in,location_on_initialization_array);

    location_on_initialization_array=character_location(rotor_three_out,ring_setting[2]);
    rotor_three_out = rotor_shift(rotor_three_out,location_on_initialization_array);
    
    temp = encryption_decryption(rotor_one_in,rotor_one_out,rotor_two_in,rotor_two_out,rotor_three_in,rotor_three_out,input_text);

    print(temp[0]);
    


    return 0;
}