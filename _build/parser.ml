type token =
  | EOF
  | ASSIGN
  | SEMICOLON
  | PROBCOLON
  | COMMA
  | IF
  | ELIF
  | ELSE
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | LPAREN
  | RPAREN
  | BITNOT
  | BITAND
  | BITOR
  | XOR
  | CONCAT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | RSHIFT
  | LSHIFT
  | ADDEQUAL
  | MINUSEQUAL
  | TIMESEQUAL
  | DIVEQUAL
  | WHILE
  | FOR
  | AND
  | OR
  | NOT
  | LENGTH
  | OCTOTHORPE
  | INT
  | CHAR
  | BOOL
  | STRING
  | FLOAT
  | PROB
  | LIST
  | VOID
  | RETURN
  | SWITCH
  | CASE
  | DEFAULT
  | BREAK
  | CONTINUE
  | FUNCTION
  | COMMENTLINE
  | COMMENTOPEN
  | COMMENTCLOSE
  | COMPEQ
  | COMPLT
  | COMPLEQ
  | COMPGT
  | COMPGEQ
  | COMPNEQ
  | BOOL_LIT of (bool)
  | INT_LIT of (int)
  | CHAR_LIT of (char)
  | FLOAT_LIT of (float)
  | STRING_LIT of (string)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 74 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* ASSIGN *);
  258 (* SEMICOLON *);
  259 (* PROBCOLON *);
  260 (* COMMA *);
  261 (* IF *);
  262 (* ELIF *);
  263 (* ELSE *);
  264 (* LBRACKET *);
  265 (* RBRACKET *);
  266 (* LBRACE *);
  267 (* RBRACE *);
  268 (* LPAREN *);
  269 (* RPAREN *);
  270 (* BITNOT *);
  271 (* BITAND *);
  272 (* BITOR *);
  273 (* XOR *);
  274 (* CONCAT *);
  275 (* PLUS *);
  276 (* MINUS *);
  277 (* TIMES *);
  278 (* DIVIDE *);
  279 (* RSHIFT *);
  280 (* LSHIFT *);
  281 (* ADDEQUAL *);
  282 (* MINUSEQUAL *);
  283 (* TIMESEQUAL *);
  284 (* DIVEQUAL *);
  285 (* WHILE *);
  286 (* FOR *);
  287 (* AND *);
  288 (* OR *);
  289 (* NOT *);
  290 (* LENGTH *);
  291 (* OCTOTHORPE *);
  292 (* INT *);
  293 (* CHAR *);
  294 (* BOOL *);
  295 (* STRING *);
  296 (* FLOAT *);
  297 (* PROB *);
  298 (* LIST *);
  299 (* VOID *);
  300 (* RETURN *);
  301 (* SWITCH *);
  302 (* CASE *);
  303 (* DEFAULT *);
  304 (* BREAK *);
  305 (* CONTINUE *);
  306 (* FUNCTION *);
  307 (* COMMENTLINE *);
  308 (* COMMENTOPEN *);
  309 (* COMMENTCLOSE *);
  310 (* COMPEQ *);
  311 (* COMPLT *);
  312 (* COMPLEQ *);
  313 (* COMPGT *);
  314 (* COMPGEQ *);
  315 (* COMPNEQ *);
    0|]

let yytransl_block = [|
  316 (* BOOL_LIT *);
  317 (* INT_LIT *);
  318 (* CHAR_LIT *);
  319 (* FLOAT_LIT *);
  320 (* STRING_LIT *);
  321 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\007\000\007\000\008\000\004\000\
\005\000\005\000\010\000\010\000\010\000\010\000\010\000\011\000\
\011\000\009\000\009\000\012\000\012\000\006\000\006\000\013\000\
\013\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\015\000\017\000\016\000\019\000\
\019\000\018\000\018\000\001\000\020\000\020\000\020\000\022\000\
\023\000\023\000\025\000\025\000\024\000\024\000\021\000\021\000\
\003\000\027\000\027\000\027\000\027\000\027\000\027\000\028\000\
\028\000\026\000\026\000\029\000\029\000\000\000"

let yylen = "\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\002\000\002\000\002\000\002\000\004\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\006\000\006\000\003\000\005\000\
\005\000\002\000\004\000\003\000\001\000\001\000\003\000\003\000\
\001\000\004\000\003\000\003\000\003\000\003\000\003\000\000\000\
\001\000\000\000\001\000\001\000\003\000\000\000\001\000\001\000\
\003\000\002\000\002\000\002\000\002\000\003\000\001\000\003\000\
\003\000\005\000\010\000\005\000\005\000\005\000\003\000\000\000\
\002\000\000\000\002\000\002\000\000\000\002\000\002\000\009\000\
\000\000\001\000\002\000\004\000\000\000\002\000\003\000\005\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\002\000\000\000\001\000\002\000"

let yydefred = "\000\000\
\077\000\000\000\102\000\000\000\076\000\090\000\094\000\091\000\
\095\000\092\000\096\000\097\000\093\000\000\000\078\000\079\000\
\089\000\000\000\000\000\000\000\101\000\098\000\099\000\000\000\
\087\000\000\000\000\000\000\000\000\000\000\000\023\000\022\000\
\026\000\025\000\024\000\000\000\000\000\027\000\028\000\000\000\
\038\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\034\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\088\000\083\000\000\000\000\000\040\000\000\000\
\000\000\036\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\085\000\000\000\000\000\016\000\000\000\000\000\
\000\000\042\000\035\000\000\000\000\000\000\000\000\000\084\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\086\000\
\000\000\000\000\000\000\000\000\080\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\073\000\000\000\000\000\
\000\000\000\000\000\000\000\000\060\000\061\000\058\000\000\000\
\000\000\000\000\000\000\000\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\062\000\043\000\044\000\045\000\046\000\
\047\000\000\000\072\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\000\000\069\000\068\000\000\000\
\000\000\071\000\066\000\000\000\070\000\000\000\000\000\000\000\
\067\000"

let yydgoto = "\002\000\
\003\000\037\000\014\000\038\000\039\000\088\000\040\000\041\000\
\046\000\141\000\148\000\047\000\089\000\142\000\143\000\172\000\
\173\000\174\000\127\000\004\000\015\000\016\000\043\000\119\000\
\044\000\017\000\018\000\019\000\022\000"

let yysindex = "\005\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\234\254\000\000\000\000\
\000\000\194\000\194\000\015\255\000\000\000\000\000\000\132\001\
\000\000\194\000\132\001\243\001\132\001\132\001\000\000\000\000\
\000\000\000\000\000\000\010\255\143\002\000\000\000\000\049\255\
\000\000\245\254\044\255\067\255\220\003\060\255\095\255\132\001\
\085\003\088\255\082\255\070\255\232\001\132\001\132\001\132\001\
\132\001\132\001\132\001\132\001\132\001\132\001\132\001\132\001\
\132\001\000\000\000\000\000\000\132\001\132\001\132\001\132\001\
\132\001\132\001\000\000\000\000\097\255\194\000\000\000\132\001\
\112\003\000\000\132\001\099\255\101\255\058\003\220\003\105\255\
\108\255\220\003\082\255\082\255\082\255\247\003\018\004\018\004\
\045\004\045\004\047\255\223\000\029\001\029\001\029\001\038\000\
\038\000\038\000\000\000\057\255\220\003\000\000\070\255\122\255\
\123\255\000\000\000\000\132\001\132\001\132\001\194\000\000\000\
\132\001\132\001\220\003\070\255\070\255\071\255\126\255\000\000\
\220\003\220\003\024\255\120\255\000\000\127\255\130\255\132\001\
\131\255\133\255\167\001\040\255\141\255\000\000\068\255\132\001\
\132\001\132\001\220\003\144\255\000\000\000\000\000\000\132\001\
\132\001\132\001\132\001\132\001\000\000\139\255\143\255\151\255\
\139\003\166\003\147\255\000\000\000\000\000\000\000\000\000\000\
\000\000\132\001\000\000\000\000\151\255\157\255\143\255\143\255\
\132\001\193\003\136\255\000\000\143\255\000\000\000\000\156\255\
\143\255\000\000\000\000\132\001\000\000\166\255\159\255\143\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\243\254\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\160\255\170\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\179\255\000\000\000\000\000\000\
\000\000\000\000\000\000\169\255\052\255\000\000\174\255\000\000\
\000\000\000\000\018\001\108\000\000\000\180\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\255\000\000\
\181\255\190\255\076\001\099\001\157\001\219\255\158\255\103\004\
\013\000\048\000\016\003\041\003\201\002\224\002\249\002\051\002\
\074\002\132\002\000\000\000\000\074\255\000\000\166\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\197\255\000\000\
\000\000\000\000\008\255\193\000\251\000\000\000\000\000\000\000\
\011\255\142\000\000\000\000\000\000\000\000\000\000\000\193\255\
\000\000\000\000\000\000\215\001\000\000\000\000\205\255\000\000\
\000\000\193\255\201\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\065\255\016\000\000\000\000\000\
\193\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\193\255\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\231\255\237\255\000\000\137\255\000\000\188\255\000\000\
\000\000\000\000\121\255\000\000\000\000\000\000\000\000\039\000\
\061\000\033\000\036\000\000\000\093\000\000\000\000\000\000\000\
\000\000\071\000\000\000\000\000\000\000"

let yytablesize = 1403
let yytable = "\100\000\
\005\000\045\000\049\000\051\000\052\000\001\000\042\000\140\000\
\050\000\056\000\163\000\057\000\029\000\029\000\029\000\024\000\
\025\000\053\000\056\000\029\000\057\000\054\000\081\000\029\000\
\024\000\025\000\026\000\086\000\087\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\152\000\184\000\020\000\101\000\102\000\103\000\104\000\105\000\
\106\000\117\000\075\000\100\000\190\000\076\000\109\000\052\000\
\077\000\111\000\108\000\140\000\052\000\056\000\057\000\058\000\
\153\000\154\000\155\000\156\000\079\000\074\000\078\000\074\000\
\074\000\158\000\159\000\074\000\074\000\053\000\074\000\066\000\
\067\000\068\000\053\000\165\000\166\000\167\000\168\000\169\000\
\021\000\023\000\123\000\124\000\125\000\074\000\074\000\129\000\
\130\000\074\000\080\000\126\000\083\000\139\000\066\000\072\000\
\073\000\074\000\107\000\112\000\074\000\113\000\147\000\116\000\
\074\000\074\000\066\000\067\000\068\000\115\000\161\000\162\000\
\147\000\120\000\121\000\122\000\074\000\074\000\074\000\074\000\
\074\000\074\000\132\000\144\000\149\000\027\000\150\000\131\000\
\133\000\028\000\145\000\029\000\132\000\146\000\157\000\027\000\
\178\000\164\000\186\000\028\000\177\000\029\000\170\000\147\000\
\171\000\139\000\134\000\135\000\158\000\188\000\030\000\001\000\
\001\000\001\000\147\000\181\000\134\000\135\000\001\000\191\000\
\030\000\136\000\001\000\192\000\081\000\137\000\138\000\001\000\
\001\000\001\000\050\000\136\000\037\000\082\000\051\000\137\000\
\138\000\031\000\032\000\033\000\034\000\035\000\036\000\039\000\
\054\000\055\000\048\000\031\000\032\000\033\000\034\000\035\000\
\036\000\072\000\049\000\160\000\072\000\180\000\179\000\072\000\
\072\000\063\000\072\000\128\000\063\000\182\000\183\000\063\000\
\063\000\000\000\063\000\187\000\031\000\031\000\031\000\189\000\
\000\000\072\000\072\000\031\000\000\000\072\000\193\000\031\000\
\000\000\063\000\063\000\000\000\031\000\063\000\000\000\000\000\
\072\000\000\000\000\000\000\000\072\000\072\000\000\000\000\000\
\063\000\000\000\000\000\000\000\063\000\063\000\000\000\000\000\
\072\000\072\000\072\000\072\000\072\000\072\000\000\000\000\000\
\063\000\063\000\063\000\063\000\063\000\063\000\003\000\003\000\
\003\000\000\000\000\000\000\000\065\000\003\000\000\000\065\000\
\000\000\003\000\065\000\065\000\000\000\065\000\003\000\003\000\
\003\000\003\000\003\000\000\000\006\000\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\065\000\065\000\000\000\000\000\
\065\000\004\000\004\000\004\000\056\000\057\000\058\000\000\000\
\004\000\000\000\000\000\065\000\004\000\000\000\000\000\065\000\
\065\000\004\000\004\000\004\000\004\000\004\000\066\000\067\000\
\068\000\000\000\000\000\065\000\065\000\065\000\065\000\065\000\
\065\000\041\000\041\000\041\000\041\000\000\000\000\000\000\000\
\000\000\041\000\000\000\000\000\000\000\041\000\000\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\018\000\018\000\018\000\
\000\000\041\000\041\000\041\000\018\000\000\000\000\000\000\000\
\018\000\000\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\000\000\000\000\041\000\041\000\
\041\000\041\000\041\000\041\000\000\000\018\000\018\000\030\000\
\030\000\030\000\000\000\000\000\000\000\000\000\030\000\000\000\
\000\000\000\000\030\000\000\000\000\000\000\000\000\000\000\000\
\000\000\018\000\018\000\018\000\018\000\018\000\018\000\021\000\
\021\000\021\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\021\000\000\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\000\000\000\000\
\000\000\000\000\032\000\032\000\032\000\000\000\000\000\021\000\
\021\000\032\000\000\000\000\000\000\000\032\000\000\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\000\000\000\000\021\000\021\000\021\000\021\000\021\000\
\021\000\118\000\032\000\032\000\000\000\006\000\007\000\008\000\
\009\000\010\000\011\000\012\000\013\000\056\000\057\000\058\000\
\000\000\000\000\000\000\000\000\000\000\000\000\032\000\032\000\
\032\000\032\000\032\000\032\000\033\000\033\000\033\000\066\000\
\067\000\068\000\000\000\033\000\000\000\000\000\000\000\033\000\
\000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\017\000\017\000\017\000\000\000\072\000\
\073\000\074\000\017\000\000\000\033\000\033\000\017\000\000\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\000\000\056\000\057\000\058\000\000\000\000\000\
\033\000\033\000\033\000\033\000\033\000\033\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\067\000\068\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\017\000\017\000\017\000\017\000\017\000\013\000\013\000\013\000\
\000\000\000\000\000\000\000\000\013\000\072\000\073\000\074\000\
\013\000\000\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\014\000\014\000\014\000\000\000\
\000\000\000\000\000\000\014\000\000\000\000\000\000\000\014\000\
\000\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\013\000\013\000\013\000\013\000\013\000\000\000\
\000\000\000\000\000\000\027\000\000\000\000\000\000\000\028\000\
\000\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\014\000\014\000\014\000\014\000\014\000\015\000\015\000\
\015\000\000\000\000\000\000\000\030\000\015\000\000\000\000\000\
\151\000\015\000\000\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\031\000\
\032\000\033\000\034\000\035\000\036\000\000\000\000\000\066\000\
\067\000\068\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\015\000\015\000\015\000\015\000\015\000\
\028\000\000\000\000\000\000\000\069\000\070\000\071\000\072\000\
\073\000\074\000\000\000\000\000\000\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\027\000\
\000\000\000\000\000\000\028\000\000\000\029\000\000\000\028\000\
\028\000\028\000\027\000\000\000\000\000\000\000\028\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\048\000\000\000\
\030\000\000\000\000\000\000\000\028\000\028\000\028\000\028\000\
\028\000\028\000\000\000\030\000\000\000\000\000\006\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\084\000\000\000\
\085\000\000\000\000\000\031\000\032\000\033\000\034\000\035\000\
\036\000\000\000\000\000\000\000\000\000\000\000\031\000\032\000\
\033\000\034\000\035\000\036\000\008\000\008\000\008\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\008\000\
\000\000\000\000\000\000\000\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\009\000\009\000\009\000\000\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\008\000\008\000\008\000\008\000\008\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\009\000\009\000\009\000\009\000\009\000\010\000\010\000\010\000\
\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\010\000\055\000\000\000\000\000\000\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\000\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\067\000\068\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000\010\000\010\000\010\000\010\000\010\000\000\000\
\000\000\000\000\000\000\000\000\069\000\070\000\071\000\072\000\
\073\000\074\000\005\000\005\000\005\000\000\000\000\000\000\000\
\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\
\000\000\000\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\006\000\006\000\006\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\000\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\000\000\000\000\007\000\007\000\007\000\000\000\005\000\005\000\
\005\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\
\000\000\000\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\011\000\000\000\011\000\000\000\006\000\006\000\006\000\
\011\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\000\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\000\000\000\000\012\000\000\000\012\000\000\000\007\000\007\000\
\007\000\012\000\000\000\000\000\000\000\012\000\000\000\000\000\
\000\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\000\000\114\000\000\000\000\000\011\000\011\000\011\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\066\000\067\000\068\000\000\000\012\000\012\000\
\012\000\082\000\000\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\000\000\000\000\069\000\
\070\000\071\000\072\000\073\000\074\000\066\000\067\000\068\000\
\000\000\000\000\000\000\000\000\110\000\000\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\000\000\000\000\069\000\070\000\071\000\072\000\073\000\074\000\
\066\000\067\000\068\000\000\000\000\000\000\000\000\000\175\000\
\000\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\000\000\000\000\069\000\070\000\071\000\
\072\000\073\000\074\000\066\000\067\000\068\000\000\000\000\000\
\000\000\000\000\176\000\000\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\000\000\000\000\
\069\000\070\000\071\000\072\000\073\000\074\000\066\000\067\000\
\068\000\000\000\000\000\000\000\000\000\185\000\000\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\000\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\066\000\067\000\068\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\000\000\000\000\069\000\070\000\
\071\000\072\000\073\000\074\000\066\000\067\000\068\000\000\000\
\000\000\000\000\000\000\000\000\000\000\056\000\057\000\058\000\
\000\000\060\000\061\000\062\000\063\000\064\000\065\000\000\000\
\000\000\069\000\070\000\071\000\072\000\073\000\074\000\066\000\
\067\000\068\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\000\057\000\058\000\000\000\000\000\000\000\062\000\063\000\
\064\000\065\000\000\000\000\000\069\000\070\000\071\000\072\000\
\073\000\074\000\066\000\067\000\068\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\000\057\000\058\000\000\000\000\000\
\000\000\000\000\000\000\064\000\065\000\000\000\000\000\069\000\
\070\000\071\000\072\000\073\000\074\000\066\000\067\000\068\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\069\000\070\000\071\000\072\000\073\000\074\000\
\002\000\002\000\002\000\000\000\000\000\000\000\000\000\002\000\
\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\
\002\000\002\000\002\000"

let yycheck = "\013\001\
\000\000\027\000\028\000\029\000\030\000\001\000\026\000\127\000\
\028\000\004\001\146\000\004\001\002\001\003\001\004\001\001\001\
\002\001\008\001\013\001\009\001\013\001\012\001\048\000\013\001\
\001\001\002\001\012\001\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\001\001\177\000\065\001\069\000\070\000\071\000\072\000\073\000\
\074\000\003\001\002\001\065\001\188\000\065\001\080\000\004\001\
\013\001\083\000\078\000\179\000\009\001\015\001\016\001\017\001\
\025\001\026\001\027\001\028\001\009\001\005\001\004\001\007\001\
\008\001\006\001\007\001\011\001\012\001\004\001\014\001\033\001\
\034\001\035\001\009\001\152\000\153\000\154\000\155\000\156\000\
\018\000\019\000\116\000\117\000\118\000\029\001\030\001\121\000\
\122\000\033\001\004\001\119\000\013\001\127\000\033\001\057\001\
\058\001\059\001\010\001\009\001\044\001\009\001\136\000\004\001\
\048\001\049\001\033\001\034\001\035\001\013\001\144\000\145\000\
\146\000\065\001\001\001\001\001\060\001\061\001\062\001\063\001\
\064\001\065\001\005\001\012\001\002\001\008\001\002\001\065\001\
\011\001\012\001\012\001\014\001\005\001\012\001\002\001\008\001\
\170\000\002\001\011\001\012\001\002\001\014\001\012\001\177\000\
\010\001\179\000\029\001\030\001\006\001\002\001\033\001\002\001\
\003\001\004\001\188\000\007\001\029\001\030\001\009\001\002\001\
\033\001\044\001\013\001\013\001\013\001\048\001\049\001\018\001\
\019\001\020\001\009\001\044\001\002\001\013\001\009\001\048\001\
\049\001\060\001\061\001\062\001\063\001\064\001\065\001\002\001\
\013\001\013\001\002\001\060\001\061\001\062\001\063\001\064\001\
\065\001\005\001\002\001\143\000\008\001\173\000\171\000\011\001\
\012\001\005\001\014\001\119\000\008\001\175\000\176\000\011\001\
\012\001\255\255\014\001\181\000\002\001\003\001\004\001\185\000\
\255\255\029\001\030\001\009\001\255\255\033\001\192\000\013\001\
\255\255\029\001\030\001\255\255\018\001\033\001\255\255\255\255\
\044\001\255\255\255\255\255\255\048\001\049\001\255\255\255\255\
\044\001\255\255\255\255\255\255\048\001\049\001\255\255\255\255\
\060\001\061\001\062\001\063\001\064\001\065\001\255\255\255\255\
\060\001\061\001\062\001\063\001\064\001\065\001\002\001\003\001\
\004\001\255\255\255\255\255\255\005\001\009\001\255\255\008\001\
\255\255\013\001\011\001\012\001\255\255\014\001\018\001\019\001\
\020\001\021\001\022\001\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\029\001\030\001\255\255\255\255\
\033\001\002\001\003\001\004\001\015\001\016\001\017\001\255\255\
\009\001\255\255\255\255\044\001\013\001\255\255\255\255\048\001\
\049\001\018\001\019\001\020\001\021\001\022\001\033\001\034\001\
\035\001\255\255\255\255\060\001\061\001\062\001\063\001\064\001\
\065\001\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\255\255\009\001\255\255\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\002\001\003\001\004\001\
\255\255\033\001\034\001\035\001\009\001\255\255\255\255\255\255\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001\059\001\255\255\034\001\035\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\013\001\255\255\255\255\255\255\255\255\255\255\
\255\255\054\001\055\001\056\001\057\001\058\001\059\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\255\255\255\255\034\001\
\035\001\009\001\255\255\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\054\001\055\001\056\001\057\001\058\001\
\059\001\003\001\034\001\035\001\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\015\001\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001\059\001\002\001\003\001\004\001\033\001\
\034\001\035\001\255\255\009\001\255\255\255\255\255\255\013\001\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\002\001\003\001\004\001\255\255\057\001\
\058\001\059\001\009\001\255\255\034\001\035\001\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\015\001\016\001\017\001\255\255\255\255\
\054\001\055\001\056\001\057\001\058\001\059\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\035\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\054\001\
\055\001\056\001\057\001\058\001\059\001\002\001\003\001\004\001\
\255\255\255\255\255\255\255\255\009\001\057\001\058\001\059\001\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\002\001\003\001\004\001\255\255\
\255\255\255\255\255\255\009\001\255\255\255\255\255\255\013\001\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\054\001\055\001\056\001\057\001\058\001\059\001\255\255\
\255\255\255\255\255\255\008\001\255\255\255\255\255\255\012\001\
\255\255\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\054\001\055\001\056\001\057\001\058\001\059\001\002\001\003\001\
\004\001\255\255\255\255\255\255\033\001\009\001\255\255\255\255\
\002\001\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\060\001\
\061\001\062\001\063\001\064\001\065\001\255\255\255\255\033\001\
\034\001\035\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\054\001\055\001\056\001\057\001\058\001\059\001\
\002\001\255\255\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\008\001\
\255\255\255\255\255\255\012\001\255\255\014\001\255\255\033\001\
\034\001\035\001\008\001\255\255\255\255\255\255\012\001\255\255\
\014\001\255\255\255\255\255\255\255\255\255\255\020\001\255\255\
\033\001\255\255\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\255\255\033\001\255\255\255\255\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\055\001\255\255\
\057\001\255\255\255\255\060\001\061\001\062\001\063\001\064\001\
\065\001\255\255\255\255\255\255\255\255\255\255\060\001\061\001\
\062\001\063\001\064\001\065\001\002\001\003\001\004\001\255\255\
\255\255\255\255\255\255\009\001\255\255\255\255\255\255\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\255\255\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\054\001\055\001\056\001\057\001\058\001\059\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\054\001\
\055\001\056\001\057\001\058\001\059\001\002\001\003\001\004\001\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\013\001\003\001\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\035\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\054\001\055\001\056\001\057\001\058\001\059\001\255\255\
\255\255\255\255\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\002\001\003\001\004\001\255\255\255\255\255\255\
\255\255\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\002\001\003\001\004\001\255\255\255\255\255\255\255\255\
\009\001\255\255\255\255\255\255\013\001\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\255\255\002\001\003\001\004\001\255\255\054\001\055\001\
\056\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\002\001\255\255\004\001\255\255\054\001\055\001\056\001\
\009\001\255\255\255\255\255\255\013\001\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\255\255\002\001\255\255\004\001\255\255\054\001\055\001\
\056\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\009\001\255\255\255\255\054\001\055\001\056\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\034\001\035\001\255\255\054\001\055\001\
\056\001\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\255\255\054\001\
\055\001\056\001\057\001\058\001\059\001\033\001\034\001\035\001\
\255\255\255\255\255\255\255\255\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\255\255\054\001\055\001\056\001\057\001\058\001\059\001\
\033\001\034\001\035\001\255\255\255\255\255\255\255\255\013\001\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\255\255\054\001\055\001\056\001\
\057\001\058\001\059\001\033\001\034\001\035\001\255\255\255\255\
\255\255\255\255\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\054\001\055\001\056\001\057\001\058\001\059\001\033\001\034\001\
\035\001\255\255\255\255\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\054\001\055\001\056\001\057\001\058\001\
\059\001\033\001\034\001\035\001\255\255\255\255\255\255\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001\059\001\033\001\034\001\035\001\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\255\255\054\001\055\001\056\001\057\001\058\001\059\001\033\001\
\034\001\035\001\255\255\255\255\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\059\001\033\001\034\001\035\001\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\023\001\024\001\255\255\255\255\054\001\
\055\001\056\001\057\001\058\001\059\001\033\001\034\001\035\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\054\001\055\001\056\001\057\001\058\001\059\001\
\002\001\003\001\004\001\255\255\255\255\255\255\255\255\009\001\
\255\255\255\255\255\255\013\001\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001"

let yynames_const = "\
  EOF\000\
  ASSIGN\000\
  SEMICOLON\000\
  PROBCOLON\000\
  COMMA\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  LPAREN\000\
  RPAREN\000\
  BITNOT\000\
  BITAND\000\
  BITOR\000\
  XOR\000\
  CONCAT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  RSHIFT\000\
  LSHIFT\000\
  ADDEQUAL\000\
  MINUSEQUAL\000\
  TIMESEQUAL\000\
  DIVEQUAL\000\
  WHILE\000\
  FOR\000\
  AND\000\
  OR\000\
  NOT\000\
  LENGTH\000\
  OCTOTHORPE\000\
  INT\000\
  CHAR\000\
  BOOL\000\
  STRING\000\
  FLOAT\000\
  PROB\000\
  LIST\000\
  VOID\000\
  RETURN\000\
  SWITCH\000\
  CASE\000\
  DEFAULT\000\
  BREAK\000\
  CONTINUE\000\
  FUNCTION\000\
  COMMENTLINE\000\
  COMMENTOPEN\000\
  COMMENTCLOSE\000\
  COMPEQ\000\
  COMPLT\000\
  COMPLEQ\000\
  COMPGT\000\
  COMPGEQ\000\
  COMPNEQ\000\
  "

let yynames_block = "\
  BOOL_LIT\000\
  INT_LIT\000\
  CHAR_LIT\000\
  FLOAT_LIT\000\
  STRING_LIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                           ( Binop(_1, Add, _3)        )
# 707 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
                           ( Binop(_1, Sub,  _3)       )
# 715 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                           ( Binop(_1, Mul, _3)        )
# 723 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                           ( Binop(_1, Div, _3)        )
# 731 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                           ( Binop(_1, CompEq, _3)     )
# 739 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                           ( Binop(_1, CompLt, _3)     )
# 747 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                           ( Binop(_1, CompLeq, _3)    )
# 755 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
                           ( Binop(_1, CompGt, _3)     )
# 763 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                           ( Binop(_1, CompEq, _3)     )
# 771 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                           ( Binop(_1, CompNeq, _3)    )
# 779 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
                           ( Binop(_1, RShift, _3)     )
# 787 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                           ( Binop(_1, LShift, _3)     )
# 795 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                           ( Binop(_1, BitAnd, _3)     )
# 803 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                           ( Binop(_1, BitOr, _3)      )
# 811 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                           ( Binop(_1, Xor, _3)        )
# 819 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                                                ( Unop(Neg, _3)            )
# 826 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                                                ( Unop(BitNot, _2)         )
# 833 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                                                ( Unop(Not, _2)            )
# 840 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                                                ( Unop(Bang, _1)           )
# 847 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                                                ( Unop(Octothorpe, _1)     )
# 854 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typ_decl) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                                                ( Cast(_2, _4)             )
# 862 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 89 "parser.mly"
                                                ( Int_lit (_1)             )
# 869 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 90 "parser.mly"
                                                ( Bool_lit(_1)             )
# 876 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 91 "parser.mly"
                                                ( String_lit(_1)           )
# 883 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 92 "parser.mly"
                                                ( Float_lit (_1)           )
# 890 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 93 "parser.mly"
                                                ( Char_lit(_1)             )
# 897 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_lit) in
    Obj.repr(
# 94 "parser.mly"
                                                ( _1                       )
# 904 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 96 "parser.mly"
                                                ( _1                       )
# 911 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                                                ( ListAddHead(_1,_6)       )
# 919 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                                                ( ListAddTail(_1,_6)       )
# 927 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                                ( Binop(_1, Concat, _3)    )
# 935 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                                                ( ListRightShift(_1,_3,_5) )
# 944 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                                                ( ListLeftShift(_1,_3,_5)  )
# 953 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                                                ( Length(_1)               )
# 960 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 105 "parser.mly"
                                                ( FunCall (_1,_3)          )
# 968 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                                                ( _2                       )
# 975 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
            ( Regular(_1)  )
# 982 "parser.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prob_init) in
    Obj.repr(
# 115 "parser.mly"
            ( Prob_Init(_1))
# 989 "parser.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                                    ( (_1,_3)              )
# 997 "parser.ml"
               : 'prob_init))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_opt) in
    Obj.repr(
# 121 "parser.mly"
                                    ( List_lit(_2)         )
# 1004 "parser.ml"
               : 'list_lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 125 "parser.mly"
                                    ( Id(_1)               )
# 1011 "parser.ml"
               : 'identifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                                    ( ListElement(_1,_3)   )
# 1019 "parser.ml"
               : 'identifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 130 "parser.mly"
                                    ( (_1, Assign, _3)     )
# 1027 "parser.ml"
               : 'assign_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 131 "parser.mly"
                                    ( (_1, PlusEqual,_3)   )
# 1035 "parser.ml"
               : 'assign_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 132 "parser.mly"
                                    ( (_1, MinusEqual, _3) )
# 1043 "parser.ml"
               : 'assign_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 133 "parser.mly"
                                    ( (_1, TimesEqual, _3) )
# 1051 "parser.ml"
               : 'assign_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 134 "parser.mly"
                                    ( (_1, DivEqual, _3)   )
# 1059 "parser.ml"
               : 'assign_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
                        ( Noexpr     )
# 1065 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                        ( _1      )
# 1072 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
                        ( []          )
# 1078 "parser.ml"
               : 'expr_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 142 "parser.mly"
                        ( _1          )
# 1085 "parser.ml"
               : 'expr_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                        ( [_1]        )
# 1092 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                        ( _3 :: _1    )
# 1100 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "parser.mly"
                        ( []          )
# 1106 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 150 "parser.mly"
                        ( List.rev _1 )
# 1113 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "parser.mly"
                        ( [_1]        )
# 1120 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                        ( _3 :: _1    )
# 1128 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
                                                                                   ( Expr(_1)          )
# 1135 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'assign_expr) in
    Obj.repr(
# 160 "parser.mly"
                                                                                   ( Assign_stmt(_1)   )
# 1142 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "parser.mly"
                                                                                   ( Break             )
# 1148 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "parser.mly"
                                                                                   ( Continue          )
# 1154 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 163 "parser.mly"
                                                                                   ( Return(_2)        )
# 1161 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_stmt) in
    Obj.repr(
# 164 "parser.mly"
                                                                                   ( _1                )
# 1168 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'if_stmt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 165 "parser.mly"
                                                                                   ( If_Else(_1,_3)    )
# 1176 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'if_stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elif) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'elif_list) in
    Obj.repr(
# 166 "parser.mly"
                                                                                   ( If_Elif(_1,_2,_3) )
# 1185 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'if_stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'elif) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'elif_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 167 "parser.mly"
                                                                                   ( If_Elif_Else(_1,_2,_3,_5))
# 1195 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'expr_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'expr_opt) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 168 "parser.mly"
                                                                                   ( For(_3,_5,_7,_10) )
# 1205 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 169 "parser.mly"
                                                                                   ( While(_3,_5)      )
# 1213 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 171 "parser.mly"
                                                                                   ( If(_3,_5)         )
# 1221 "parser.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 172 "parser.mly"
                                                                                   ( Elif(_3,_5)       )
# 1229 "parser.ml"
               : 'elif))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 173 "parser.mly"
                                                                                   ( Block(List.rev _2))
# 1236 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 176 "parser.mly"
                      ( []     )
# 1242 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 177 "parser.mly"
                      ( _2::_1 )
# 1250 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "parser.mly"
                        ( []     )
# 1256 "parser.ml"
               : 'elif_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'elif) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'elif_list) in
    Obj.repr(
# 181 "parser.mly"
                        ( _1::_2 )
# 1264 "parser.ml"
               : 'elif_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 184 "parser.mly"
                   ( _1 )
# 1271 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "parser.mly"
                ( ([], []) )
# 1277 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 187 "parser.mly"
              ( ((_2 :: fst _1), snd _1) )
# 1285 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 188 "parser.mly"
              ( (fst _1, (_2 :: snd _1)) )
# 1293 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 194 "parser.mly"
({ typ_name = _1; 
   fname = _2; 
   formals = List.rev _4;
   locals = List.rev _7; 
   body = _8; 
  })
# 1309 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 202 "parser.mly"
              ( [] )
# 1315 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 203 "parser.mly"
              ( _1 )
# 1322 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 206 "parser.mly"
                                ( [(_1,_2)]     )
# 1330 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ_decl) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 207 "parser.mly"
                                ( (_3,_4) :: _1 )
# 1339 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 210 "parser.mly"
                   ( []       )
# 1345 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 211 "parser.mly"
                   ( _2 :: _1 )
# 1353 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 214 "parser.mly"
                      ( PlainDecl (_1, _2) )
# 1361 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'init) in
    Obj.repr(
# 215 "parser.mly"
                                    ( InitDecl ((_1, _2),(Id(_2), Assign, _4)))
# 1370 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'spec_qual_list) in
    Obj.repr(
# 220 "parser.mly"
                     (_1)
# 1377 "parser.ml"
               : 'typ_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 223 "parser.mly"
          ( Int    )
# 1383 "parser.ml"
               : 'typ_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "parser.mly"
          ( Bool   )
# 1389 "parser.ml"
               : 'typ_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 225 "parser.mly"
          ( Float  )
# 1395 "parser.ml"
               : 'typ_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 226 "parser.mly"
          ( Void   )
# 1401 "parser.ml"
               : 'typ_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 227 "parser.mly"
          ( Char   )
# 1407 "parser.ml"
               : 'typ_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 228 "parser.mly"
          ( String )
# 1413 "parser.ml"
               : 'typ_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 231 "parser.mly"
          ( Prob )
# 1419 "parser.ml"
               : 'typ_qual))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "parser.mly"
          ( List )
# 1425 "parser.ml"
               : 'typ_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ_spec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'spec_qual_list_opt) in
    Obj.repr(
# 235 "parser.mly"
                              (_1::_2)
# 1433 "parser.ml"
               : 'spec_qual_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'spec_qual_list) in
    Obj.repr(
# 236 "parser.mly"
                          (_1::_2)
# 1441 "parser.ml"
               : 'spec_qual_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 239 "parser.mly"
                 ([])
# 1447 "parser.ml"
               : 'spec_qual_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'spec_qual_list) in
    Obj.repr(
# 240 "parser.mly"
                 (_1)
# 1454 "parser.ml"
               : 'spec_qual_list_opt))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
