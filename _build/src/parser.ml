type token =
  | EOF
  | ASSIGN
  | SEMICOLON
  | PROBCOLON
  | COMMA
  | IF
  | ELIF
  | ELSE
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | LPAREN
  | RPAREN
  | BITNOT
  | BITAND
  | BITOR
  | XOR
  | CONCAT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | RSHIFT
  | LSHIFT
  | ADDEQUAL
  | MINUSEQUAL
  | TIMESEQUAL
  | DIVEQUAL
  | WHILE
  | FOR
  | AND
  | OR
  | NOT
  | LENGTH
  | OCTOTHORPE
  | ADDHEAD
  | ADDTAIL
  | INT
  | CHAR
  | BOOL
  | STRING
  | FLOAT
  | PROB
  | LIST
  | VOID
  | RETURN
  | SWITCH
  | CASE
  | DEFAULT
  | BREAK
  | CONTINUE
  | FUNCTION
  | COMPEQ
  | COMPLT
  | COMPLEQ
  | COMPGT
  | COMPGEQ
  | COMPNEQ
  | BOOL_LIT of (bool)
  | INT_LIT of (int)
  | CHAR_LIT of (char)
  | FLOAT_LIT of (float)
  | STRING_LIT of (string)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 1 "src/parser.mly"
 open Ast 
# 73 "src/parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* ASSIGN *);
  258 (* SEMICOLON *);
  259 (* PROBCOLON *);
  260 (* COMMA *);
  261 (* IF *);
  262 (* ELIF *);
  263 (* ELSE *);
  264 (* LBRACKET *);
  265 (* RBRACKET *);
  266 (* LBRACE *);
  267 (* RBRACE *);
  268 (* LPAREN *);
  269 (* RPAREN *);
  270 (* BITNOT *);
  271 (* BITAND *);
  272 (* BITOR *);
  273 (* XOR *);
  274 (* CONCAT *);
  275 (* PLUS *);
  276 (* MINUS *);
  277 (* TIMES *);
  278 (* DIVIDE *);
  279 (* RSHIFT *);
  280 (* LSHIFT *);
  281 (* ADDEQUAL *);
  282 (* MINUSEQUAL *);
  283 (* TIMESEQUAL *);
  284 (* DIVEQUAL *);
  285 (* WHILE *);
  286 (* FOR *);
  287 (* AND *);
  288 (* OR *);
  289 (* NOT *);
  290 (* LENGTH *);
  291 (* OCTOTHORPE *);
  292 (* ADDHEAD *);
  293 (* ADDTAIL *);
  294 (* INT *);
  295 (* CHAR *);
  296 (* BOOL *);
  297 (* STRING *);
  298 (* FLOAT *);
  299 (* PROB *);
  300 (* LIST *);
  301 (* VOID *);
  302 (* RETURN *);
  303 (* SWITCH *);
  304 (* CASE *);
  305 (* DEFAULT *);
  306 (* BREAK *);
  307 (* CONTINUE *);
  308 (* FUNCTION *);
  309 (* COMPEQ *);
  310 (* COMPLT *);
  311 (* COMPLEQ *);
  312 (* COMPGT *);
  313 (* COMPGEQ *);
  314 (* COMPNEQ *);
    0|]

let yytransl_block = [|
  315 (* BOOL_LIT *);
  316 (* INT_LIT *);
  317 (* CHAR_LIT *);
  318 (* FLOAT_LIT *);
  319 (* STRING_LIT *);
  320 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\004\000\004\000\007\000\008\000\009\000\009\000\010\000\010\000\
\005\000\005\000\011\000\011\000\006\000\006\000\012\000\012\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\014\000\016\000\015\000\018\000\018\000\017\000\
\017\000\001\000\019\000\019\000\019\000\021\000\022\000\022\000\
\024\000\024\000\023\000\023\000\020\000\020\000\003\000\026\000\
\026\000\026\000\026\000\026\000\026\000\027\000\027\000\025\000\
\025\000\028\000\028\000\000\000"

let yylen = "\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\004\000\002\000\002\000\002\000\
\002\000\004\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\004\000\004\000\003\000\002\000\003\000\004\000\003\000\
\001\000\001\000\003\000\003\000\000\000\002\000\000\000\001\000\
\000\000\001\000\001\000\003\000\000\000\001\000\001\000\003\000\
\002\000\002\000\002\000\003\000\001\000\003\000\003\000\005\000\
\009\000\005\000\005\000\005\000\003\000\000\000\002\000\000\000\
\002\000\002\000\000\000\002\000\002\000\009\000\000\000\001\000\
\002\000\004\000\000\000\002\000\003\000\005\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\002\000\000\000\001\000\002\000"

let yydefred = "\000\000\
\075\000\000\000\100\000\000\000\074\000\088\000\092\000\089\000\
\093\000\090\000\094\000\095\000\091\000\000\000\076\000\077\000\
\087\000\000\000\000\000\000\000\099\000\096\000\097\000\000\000\
\085\000\000\000\000\000\000\000\000\000\000\000\028\000\027\000\
\031\000\030\000\029\000\000\000\000\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\086\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\024\000\037\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\081\000\000\000\000\000\033\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\083\000\
\000\000\000\000\021\000\000\000\044\000\039\000\000\000\046\000\
\000\000\000\000\000\000\082\000\000\000\000\000\000\000\084\000\
\000\000\000\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
\058\000\059\000\057\000\000\000\000\000\000\000\000\000\000\000\
\000\000\060\000\000\000\070\000\062\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\073\000\000\000\067\000\066\000\
\000\000\000\000\069\000\064\000\000\000\068\000\000\000\000\000\
\065\000"

let yydgoto = "\002\000\
\003\000\151\000\014\000\038\000\044\000\092\000\039\000\094\000\
\095\000\152\000\045\000\093\000\146\000\147\000\165\000\166\000\
\167\000\135\000\004\000\015\000\016\000\041\000\131\000\042\000\
\017\000\018\000\019\000\022\000"

let yysindex = "\016\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\216\254\000\000\000\000\
\000\000\083\000\083\000\126\255\000\000\000\000\000\000\251\255\
\000\000\083\000\251\255\142\004\251\255\251\255\000\000\000\000\
\000\000\000\000\000\000\063\255\102\001\011\255\000\000\218\254\
\046\255\079\255\198\003\060\255\083\255\251\255\148\001\084\255\
\109\255\072\255\251\255\251\255\102\255\251\255\000\000\251\255\
\251\255\251\255\251\255\251\255\251\255\251\255\251\255\251\255\
\251\255\251\255\251\255\251\255\251\255\251\255\000\000\000\000\
\000\000\251\255\251\255\251\255\251\255\251\255\251\255\107\255\
\111\255\000\000\104\255\083\000\000\000\251\255\194\001\000\000\
\251\255\252\001\198\003\127\255\133\255\102\255\000\000\198\003\
\198\003\109\255\109\255\109\255\012\006\056\006\056\006\070\006\
\070\006\065\255\065\255\065\255\065\255\065\255\065\255\065\255\
\065\255\065\255\057\255\057\255\057\255\251\255\251\255\000\000\
\089\255\198\003\000\000\072\255\000\000\000\000\251\255\000\000\
\198\003\198\003\083\000\000\000\198\003\096\255\121\255\000\000\
\055\255\149\255\000\000\150\255\151\255\251\255\163\255\164\255\
\040\002\000\000\124\255\251\255\251\255\251\255\198\003\167\255\
\000\000\000\000\000\000\158\255\165\255\170\255\086\002\132\002\
\176\255\000\000\251\255\000\000\000\000\170\255\172\255\165\255\
\165\255\251\255\178\002\144\255\000\000\165\255\000\000\000\000\
\184\255\165\255\000\000\000\000\251\255\000\000\174\255\165\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\250\254\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\175\255\180\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\082\000\000\000\198\000\000\000\000\000\
\000\000\178\255\092\255\000\000\183\255\000\000\000\000\000\000\
\236\002\000\001\000\000\185\255\140\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\255\000\000\196\255\140\000\000\000\010\255\
\132\255\038\003\096\003\154\003\075\255\222\001\206\002\226\000\
\028\001\206\004\244\004\026\005\064\005\102\005\140\005\178\005\
\216\005\254\005\000\004\058\004\116\004\000\000\000\000\000\000\
\000\000\100\255\000\000\058\001\000\000\000\000\000\000\000\000\
\155\255\222\255\188\255\000\000\007\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\195\255\000\000\000\000\
\000\000\000\000\211\255\000\000\000\000\195\255\000\255\000\000\
\000\000\000\000\000\000\000\000\000\000\056\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\056\255\018\000\000\000\
\000\000\195\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\197\255\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\232\255\238\255\000\000\000\000\000\000\000\000\165\000\
\117\000\135\255\000\000\000\000\000\000\000\000\103\255\065\000\
\047\000\050\000\000\000\084\000\000\000\000\000\000\000\000\000\
\128\000\000\000\000\000\000\000"

let yytablesize = 1920
let yytable = "\037\000\
\005\000\048\000\043\000\047\000\049\000\050\000\098\000\040\000\
\055\000\048\000\056\000\016\000\048\000\016\000\175\000\176\000\
\001\000\055\000\016\000\056\000\180\000\087\000\016\000\020\000\
\182\000\082\000\090\000\091\000\161\000\096\000\185\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\080\000\081\000\
\177\000\112\000\113\000\114\000\115\000\116\000\117\000\024\000\
\025\000\098\000\083\000\183\000\072\000\122\000\072\000\072\000\
\124\000\121\000\072\000\072\000\085\000\072\000\051\000\057\000\
\058\000\059\000\052\000\036\000\036\000\036\000\036\000\057\000\
\058\000\059\000\084\000\036\000\072\000\072\000\086\000\036\000\
\072\000\071\000\072\000\073\000\036\000\129\000\130\000\051\000\
\089\000\071\000\072\000\073\000\051\000\072\000\133\000\052\000\
\071\000\072\000\072\000\118\000\052\000\051\000\145\000\119\000\
\134\000\120\000\072\000\072\000\072\000\072\000\072\000\072\000\
\077\000\078\000\079\000\159\000\160\000\138\000\024\000\025\000\
\027\000\156\000\157\000\139\000\028\000\038\000\029\000\038\000\
\127\000\026\000\171\000\126\000\038\000\071\000\072\000\073\000\
\038\000\021\000\023\000\145\000\138\000\140\000\141\000\027\000\
\132\000\030\000\179\000\028\000\034\000\029\000\034\000\137\000\
\148\000\149\000\150\000\034\000\153\000\154\000\142\000\034\000\
\162\000\163\000\143\000\144\000\140\000\141\000\164\000\156\000\
\030\000\170\000\174\000\031\000\032\000\033\000\034\000\035\000\
\036\000\181\000\184\000\079\000\049\000\142\000\080\000\050\000\
\070\000\143\000\144\000\070\000\047\000\053\000\070\000\070\000\
\053\000\070\000\031\000\032\000\033\000\034\000\035\000\036\000\
\054\000\047\000\128\000\158\000\173\000\172\000\136\000\061\000\
\070\000\070\000\061\000\000\000\070\000\061\000\061\000\035\000\
\061\000\035\000\000\000\000\000\000\000\000\000\035\000\000\000\
\000\000\070\000\035\000\000\000\000\000\070\000\070\000\061\000\
\061\000\000\000\000\000\061\000\000\000\000\000\070\000\070\000\
\070\000\070\000\070\000\070\000\000\000\000\000\000\000\000\000\
\061\000\000\000\027\000\000\000\061\000\061\000\028\000\000\000\
\029\000\000\000\000\000\000\000\000\000\061\000\061\000\061\000\
\061\000\061\000\061\000\000\000\000\000\000\000\063\000\000\000\
\000\000\063\000\000\000\030\000\063\000\063\000\000\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\063\000\063\000\
\000\000\000\000\063\000\000\000\000\000\031\000\032\000\033\000\
\034\000\035\000\036\000\000\000\000\000\000\000\000\000\063\000\
\000\000\000\000\000\000\063\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\063\000\063\000\063\000\
\063\000\063\000\041\000\041\000\041\000\041\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\041\000\000\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\000\000\000\000\
\000\000\000\000\041\000\041\000\041\000\041\000\041\000\000\000\
\006\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\041\000\
\041\000\041\000\041\000\041\000\045\000\045\000\045\000\045\000\
\000\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\045\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\000\000\000\000\000\000\000\000\045\000\045\000\045\000\045\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\045\000\045\000\045\000\045\000\045\000\032\000\032\000\
\032\000\032\000\000\000\000\000\000\000\000\000\032\000\000\000\
\000\000\000\000\032\000\000\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\003\000\003\000\003\000\003\000\032\000\032\000\
\032\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\
\000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
\000\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
\023\000\023\000\023\000\023\000\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\000\000\023\000\000\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\004\000\004\000\004\000\004\000\
\000\000\023\000\023\000\000\000\004\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\000\000\004\000\004\000\004\000\
\004\000\004\000\000\000\000\000\023\000\023\000\023\000\023\000\
\023\000\023\000\026\000\026\000\026\000\026\000\000\000\000\000\
\000\000\000\000\026\000\000\000\000\000\000\000\026\000\000\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\000\000\000\000\
\000\000\000\000\000\000\026\000\026\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\054\000\055\000\
\056\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\026\000\026\000\026\000\026\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\000\000\000\000\000\000\000\000\071\000\072\000\
\073\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\000\000\056\000\000\000\
\000\000\000\000\074\000\075\000\076\000\077\000\078\000\079\000\
\088\000\000\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\000\000\000\000\000\000\000\000\071\000\072\000\073\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\000\000\000\056\000\000\000\000\000\000\000\
\074\000\075\000\076\000\077\000\078\000\079\000\123\000\000\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\001\000\001\000\
\001\000\001\000\071\000\072\000\073\000\000\000\001\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\001\000\
\001\000\001\000\000\000\000\000\000\000\000\000\074\000\075\000\
\076\000\077\000\078\000\079\000\054\000\000\000\056\000\000\000\
\000\000\000\000\000\000\000\000\125\000\000\000\000\000\000\000\
\000\000\000\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\000\000\000\000\000\000\000\000\071\000\072\000\073\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\155\000\056\000\000\000\000\000\000\000\000\000\000\000\
\074\000\075\000\076\000\077\000\078\000\079\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\000\000\000\000\000\000\000\000\
\071\000\072\000\073\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\054\000\000\000\
\056\000\000\000\000\000\000\000\074\000\075\000\076\000\077\000\
\078\000\079\000\168\000\000\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\000\000\000\000\000\000\000\000\071\000\072\000\
\073\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\000\000\056\000\000\000\
\000\000\000\000\074\000\075\000\076\000\077\000\078\000\079\000\
\169\000\000\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\000\000\000\000\000\000\000\000\071\000\072\000\073\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\000\000\000\056\000\000\000\000\000\000\000\
\074\000\075\000\076\000\077\000\078\000\079\000\178\000\000\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\002\000\002\000\
\002\000\002\000\071\000\072\000\073\000\000\000\002\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\002\000\
\002\000\002\000\000\000\000\000\000\000\000\000\074\000\075\000\
\076\000\077\000\078\000\079\000\022\000\022\000\022\000\022\000\
\000\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
\022\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\022\000\022\000\022\000\022\000\022\000\013\000\013\000\
\013\000\013\000\000\000\000\000\000\000\000\000\013\000\000\000\
\000\000\000\000\013\000\000\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\013\000\013\000\013\000\013\000\013\000\
\014\000\014\000\014\000\014\000\000\000\000\000\000\000\000\000\
\014\000\000\000\000\000\000\000\014\000\000\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\014\000\014\000\014\000\
\014\000\014\000\015\000\015\000\015\000\015\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\000\000\015\000\000\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\054\000\000\000\
\056\000\000\000\000\000\000\000\000\000\000\000\015\000\015\000\
\015\000\015\000\015\000\015\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\000\000\000\000\000\000\000\000\071\000\072\000\
\073\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\074\000\075\000\076\000\077\000\078\000\079\000\
\008\000\008\000\008\000\008\000\000\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\008\000\008\000\008\000\
\008\000\008\000\009\000\009\000\009\000\009\000\000\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\009\000\
\009\000\009\000\009\000\009\000\010\000\010\000\010\000\010\000\
\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\000\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\000\000\000\000\000\000\000\000\000\000\027\000\000\000\000\000\
\000\000\028\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\010\000\010\000\010\000\010\000\010\000\030\000\000\000\
\000\000\000\000\000\000\006\000\007\000\008\000\009\000\010\000\
\011\000\012\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\032\000\033\000\034\000\035\000\036\000\011\000\011\000\
\011\000\011\000\000\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\011\000\000\000\000\000\000\000\000\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\012\000\012\000\012\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\012\000\000\000\011\000\011\000\011\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\017\000\017\000\017\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\017\000\000\000\
\012\000\012\000\012\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\018\000\018\000\018\000\000\000\000\000\000\000\000\000\
\018\000\000\000\000\000\000\000\018\000\000\000\017\000\017\000\
\017\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\019\000\019\000\
\019\000\019\000\000\000\000\000\000\000\000\000\019\000\000\000\
\000\000\000\000\019\000\000\000\018\000\018\000\018\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\020\000\020\000\020\000\
\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
\020\000\000\000\019\000\019\000\019\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\000\005\000\005\000\005\000\000\000\000\000\
\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\
\020\000\020\000\020\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\006\000\006\000\006\000\006\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\000\000\006\000\000\000\005\000\005\000\
\005\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\007\000\
\007\000\007\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\007\000\000\000\006\000\006\000\006\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\057\000\058\000\059\000\000\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\000\000\000\000\000\000\000\000\071\000\072\000\073\000\000\000\
\000\000\000\000\007\000\007\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\075\000\076\000\077\000\078\000\079\000\057\000\058\000\
\059\000\000\000\000\000\000\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\057\000\058\000\059\000\000\000\
\071\000\072\000\073\000\000\000\065\000\066\000\067\000\068\000\
\069\000\070\000\000\000\000\000\000\000\000\000\071\000\072\000\
\073\000\000\000\000\000\000\000\074\000\075\000\076\000\077\000\
\078\000\079\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\074\000\075\000\076\000\077\000\078\000\079\000"

let yycheck = "\024\000\
\000\000\002\001\027\000\028\000\029\000\030\000\013\001\026\000\
\004\001\028\000\004\001\002\001\013\001\004\001\168\000\169\000\
\001\000\013\001\009\001\013\001\174\000\046\000\013\001\064\001\
\178\000\064\001\051\000\052\000\150\000\054\000\184\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\036\001\037\001\
\170\000\074\000\075\000\076\000\077\000\078\000\079\000\001\001\
\002\001\064\001\013\001\181\000\005\001\086\000\007\001\008\001\
\089\000\084\000\011\001\012\001\009\001\014\001\008\001\015\001\
\016\001\017\001\012\001\001\001\002\001\003\001\004\001\015\001\
\016\001\017\001\004\001\009\001\029\001\030\001\004\001\013\001\
\033\001\033\001\034\001\035\001\018\001\118\000\119\000\004\001\
\013\001\033\001\034\001\035\001\009\001\046\001\127\000\004\001\
\033\001\050\001\051\001\001\001\009\001\008\001\135\000\001\001\
\131\000\010\001\059\001\060\001\061\001\062\001\063\001\064\001\
\056\001\057\001\058\001\148\000\149\000\005\001\001\001\002\001\
\008\001\006\001\007\001\011\001\012\001\002\001\014\001\004\001\
\004\001\012\001\163\000\013\001\009\001\033\001\034\001\035\001\
\013\001\018\000\019\000\172\000\005\001\029\001\030\001\008\001\
\064\001\033\001\011\001\012\001\002\001\014\001\004\001\064\001\
\012\001\012\001\012\001\009\001\002\001\002\001\046\001\013\001\
\002\001\012\001\050\001\051\001\029\001\030\001\010\001\006\001\
\033\001\002\001\007\001\059\001\060\001\061\001\062\001\063\001\
\064\001\002\001\013\001\013\001\009\001\046\001\013\001\009\001\
\005\001\050\001\051\001\008\001\002\001\013\001\011\001\012\001\
\036\000\014\001\059\001\060\001\061\001\062\001\063\001\064\001\
\013\001\013\001\094\000\147\000\166\000\164\000\131\000\005\001\
\029\001\030\001\008\001\255\255\033\001\011\001\012\001\002\001\
\014\001\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\046\001\013\001\255\255\255\255\050\001\051\001\029\001\
\030\001\255\255\255\255\033\001\255\255\255\255\059\001\060\001\
\061\001\062\001\063\001\064\001\255\255\255\255\255\255\255\255\
\046\001\255\255\008\001\255\255\050\001\051\001\012\001\255\255\
\014\001\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\062\001\063\001\064\001\255\255\255\255\255\255\005\001\255\255\
\255\255\008\001\255\255\033\001\011\001\012\001\255\255\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\059\001\060\001\061\001\
\062\001\063\001\064\001\255\255\255\255\255\255\255\255\046\001\
\255\255\255\255\255\255\050\001\051\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\062\001\
\063\001\064\001\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\255\255\033\001\034\001\035\001\036\001\037\001\255\255\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\255\255\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\001\001\002\001\003\001\004\001\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\255\255\033\001\034\001\035\001\036\001\
\037\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\001\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\001\001\002\001\003\001\004\001\033\001\034\001\
\035\001\255\255\009\001\255\255\255\255\255\255\013\001\255\255\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\001\001\002\001\003\001\004\001\255\255\255\255\255\255\255\255\
\009\001\255\255\255\255\255\255\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\001\001\002\001\003\001\004\001\
\255\255\034\001\035\001\255\255\009\001\255\255\255\255\255\255\
\013\001\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\053\001\054\001\055\001\056\001\
\057\001\058\001\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\255\255\255\255\034\001\035\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\255\255\033\001\034\001\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\255\255\003\001\255\255\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\255\255\033\001\034\001\035\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\255\255\003\001\255\255\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\001\001\002\001\
\003\001\004\001\033\001\034\001\035\001\255\255\009\001\255\255\
\255\255\255\255\013\001\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\001\001\255\255\003\001\255\255\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\255\255\033\001\034\001\035\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\255\255\255\255\255\255\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\033\001\034\001\035\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\003\001\255\255\255\255\255\255\053\001\054\001\055\001\056\001\
\057\001\058\001\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\255\255\033\001\034\001\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\255\255\003\001\255\255\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\255\255\033\001\034\001\035\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\255\255\003\001\255\255\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\001\001\002\001\
\003\001\004\001\033\001\034\001\035\001\255\255\009\001\255\255\
\255\255\255\255\013\001\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\001\001\002\001\003\001\004\001\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\001\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\001\001\002\001\003\001\004\001\255\255\255\255\255\255\255\255\
\009\001\255\255\255\255\255\255\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\056\001\
\057\001\058\001\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\003\001\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\255\255\033\001\034\001\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\001\001\002\001\003\001\004\001\255\255\255\255\255\255\255\255\
\009\001\255\255\255\255\255\255\013\001\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\056\001\
\057\001\058\001\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\255\255\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\001\001\002\001\003\001\004\001\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\013\001\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\255\255\255\255\008\001\255\255\255\255\
\255\255\012\001\255\255\014\001\255\255\255\255\255\255\255\255\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\033\001\255\255\
\255\255\255\255\255\255\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\062\001\063\001\064\001\001\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\013\001\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\013\001\255\255\053\001\054\001\055\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\255\255\
\053\001\054\001\055\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\255\255\255\255\255\255\255\255\
\009\001\255\255\255\255\255\255\013\001\255\255\053\001\054\001\
\055\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\013\001\255\255\053\001\054\001\055\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\013\001\255\255\053\001\054\001\055\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\255\255\
\053\001\054\001\055\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\255\255\255\255\255\255\255\255\
\009\001\255\255\255\255\255\255\013\001\255\255\053\001\054\001\
\055\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\013\001\255\255\053\001\054\001\055\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\015\001\016\001\017\001\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\255\255\033\001\034\001\035\001\255\255\
\255\255\255\255\053\001\054\001\055\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\015\001\016\001\
\017\001\255\255\255\255\255\255\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\015\001\016\001\017\001\255\255\
\033\001\034\001\035\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\255\255\033\001\034\001\
\035\001\255\255\255\255\255\255\053\001\054\001\055\001\056\001\
\057\001\058\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001"

let yynames_const = "\
  EOF\000\
  ASSIGN\000\
  SEMICOLON\000\
  PROBCOLON\000\
  COMMA\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  LPAREN\000\
  RPAREN\000\
  BITNOT\000\
  BITAND\000\
  BITOR\000\
  XOR\000\
  CONCAT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  RSHIFT\000\
  LSHIFT\000\
  ADDEQUAL\000\
  MINUSEQUAL\000\
  TIMESEQUAL\000\
  DIVEQUAL\000\
  WHILE\000\
  FOR\000\
  AND\000\
  OR\000\
  NOT\000\
  LENGTH\000\
  OCTOTHORPE\000\
  ADDHEAD\000\
  ADDTAIL\000\
  INT\000\
  CHAR\000\
  BOOL\000\
  STRING\000\
  FLOAT\000\
  PROB\000\
  LIST\000\
  VOID\000\
  RETURN\000\
  SWITCH\000\
  CASE\000\
  DEFAULT\000\
  BREAK\000\
  CONTINUE\000\
  FUNCTION\000\
  COMPEQ\000\
  COMPLT\000\
  COMPLEQ\000\
  COMPGT\000\
  COMPGEQ\000\
  COMPNEQ\000\
  "

let yynames_block = "\
  BOOL_LIT\000\
  INT_LIT\000\
  CHAR_LIT\000\
  FLOAT_LIT\000\
  STRING_LIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "src/parser.mly"
                           ( Binop(_1, Add, _3)        )
# 829 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "src/parser.mly"
                           ( Binop(_1, Sub,  _3)       )
# 837 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "src/parser.mly"
                           ( Binop(_1, Mul, _3)        )
# 845 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "src/parser.mly"
                           ( Binop(_1, Div, _3)        )
# 853 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 68 "src/parser.mly"
                           ( Binop(_1, CompEq, _3)     )
# 861 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "src/parser.mly"
                           ( Binop(_1, CompLt, _3)     )
# 869 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "src/parser.mly"
                           ( Binop(_1, CompLeq, _3)    )
# 877 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "src/parser.mly"
                           ( Binop(_1, CompGt, _3)     )
# 885 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "src/parser.mly"
                           ( Binop(_1, CompEq, _3)     )
# 893 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 73 "src/parser.mly"
                           ( Binop(_1, CompNeq, _3)    )
# 901 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "src/parser.mly"
                           ( Binop(_1, RShift, _3)     )
# 909 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "src/parser.mly"
                           ( Binop(_1, LShift, _3)     )
# 917 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 76 "src/parser.mly"
                           ( Binop(_1, BitAnd, _3)     )
# 925 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "src/parser.mly"
                           ( Binop(_1, BitOr, _3)      )
# 933 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "src/parser.mly"
                           ( Binop(_1, Xor, _3)        )
# 941 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "src/parser.mly"
                           ( Assign(_1, Equal, _3)      )
# 949 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "src/parser.mly"
                           ( Assign(_1, PlusEqual,_3)   )
# 957 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "src/parser.mly"
                           ( Assign(_1, MinusEqual, _3) )
# 965 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "src/parser.mly"
                           ( Assign(_1, TimesEqual, _3) )
# 973 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "src/parser.mly"
                           ( Assign(_1, DivEqual, _3)   )
# 981 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 86 "src/parser.mly"
                                                  ( Unop(Neg, _3)            )
# 988 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "src/parser.mly"
                                                  ( Unop(BitNot, _2)         )
# 995 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "src/parser.mly"
                                                  ( Unop(Not, _2)            )
# 1002 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 89 "src/parser.mly"
                                                  ( Unop(Bang, _1)           )
# 1009 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 90 "src/parser.mly"
                                                  ( Unop(Octothorpe, _1)     )
# 1016 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typ_decl) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "src/parser.mly"
                                                  ( Cast(_2, _4)             )
# 1024 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 93 "src/parser.mly"
                                                  ( Int_lit (_1)             )
# 1031 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 94 "src/parser.mly"
                                                  ( Bool_lit(_1)             )
# 1038 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 95 "src/parser.mly"
                                                  ( String_lit(_1)           )
# 1045 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 96 "src/parser.mly"
                                                  ( Float_lit (_1)           )
# 1052 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 97 "src/parser.mly"
                                                  ( Char_lit(_1)             )
# 1059 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 99 "src/parser.mly"
                                                  ( _1                       )
# 1066 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_opt) in
    Obj.repr(
# 101 "src/parser.mly"
                                                  ( List_lit(_2)             )
# 1073 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "src/parser.mly"
                                                  ( ListAddHead(_1,_4)       )
# 1081 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "src/parser.mly"
                                                  ( ListAddTail(_1,_4)       )
# 1089 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "src/parser.mly"
                                                  ( Binop(_1, Concat, _3)    )
# 1097 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 105 "src/parser.mly"
                                                  ( Length(_1)               )
# 1104 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "src/parser.mly"
                                                  ( ProbColon(_1,_3)         )
# 1112 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 109 "src/parser.mly"
                                                  ( FunCall (_1,_3)          )
# 1120 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 111 "src/parser.mly"
                                                  ( _2                       )
# 1127 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 115 "src/parser.mly"
                                                  ( Id(_1)                   )
# 1134 "src/parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_elt) in
    Obj.repr(
# 116 "src/parser.mly"
                                                  ( _1                       )
# 1141 "src/parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'index) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'index_list_opt) in
    Obj.repr(
# 119 "src/parser.mly"
                                   ( ListElement(_1,_2,_3) )
# 1150 "src/parser.ml"
               : 'list_elt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 120 "src/parser.mly"
                                   ( Index(_2)             )
# 1157 "src/parser.ml"
               : 'index))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "src/parser.mly"
                                   ( []                    )
# 1163 "src/parser.ml"
               : 'index_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'index) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'index_list_opt) in
    Obj.repr(
# 123 "src/parser.mly"
                                   ( _1::_2                )
# 1171 "src/parser.ml"
               : 'index_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "src/parser.mly"
                        ( Noexpr      )
# 1177 "src/parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "src/parser.mly"
                        ( _1          )
# 1184 "src/parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "src/parser.mly"
                        ( []          )
# 1190 "src/parser.ml"
               : 'expr_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 132 "src/parser.mly"
                        ( _1          )
# 1197 "src/parser.ml"
               : 'expr_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "src/parser.mly"
                        ( [_1]        )
# 1204 "src/parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "src/parser.mly"
                        ( _3 :: _1    )
# 1212 "src/parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "src/parser.mly"
                        ( []          )
# 1218 "src/parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 140 "src/parser.mly"
                        ( List.rev _1 )
# 1225 "src/parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "src/parser.mly"
                        ( [_1]        )
# 1232 "src/parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "src/parser.mly"
                        ( _3 :: _1    )
# 1240 "src/parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 149 "src/parser.mly"
                                                                                   ( Expr(_1)          )
# 1247 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "src/parser.mly"
                                                                                   ( Break             )
# 1253 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "src/parser.mly"
                                                                                   ( Continue          )
# 1259 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 152 "src/parser.mly"
                                                                                   ( Return(_2)        )
# 1266 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_stmt) in
    Obj.repr(
# 153 "src/parser.mly"
                                                                                   ( _1                )
# 1273 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'if_stmt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 154 "src/parser.mly"
                                                                                   ( If_Else(_1,_3)    )
# 1281 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'if_stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elif) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'elif_list) in
    Obj.repr(
# 155 "src/parser.mly"
                                                                                   ( If_Elif(_1,_2,_3) )
# 1290 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'if_stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'elif) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'elif_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 156 "src/parser.mly"
                                                                                   ( If_Elif_Else(_1,_2,_3,_5))
# 1300 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 157 "src/parser.mly"
                                                                                   ( For(_3,_5,_7,_9) )
# 1310 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 158 "src/parser.mly"
                                                                                   ( While(_3,_5)      )
# 1318 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 160 "src/parser.mly"
                                                                                   ( If(_3,_5)         )
# 1326 "src/parser.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 161 "src/parser.mly"
                                                                                   ( Elif(_3,_5)       )
# 1334 "src/parser.ml"
               : 'elif))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 162 "src/parser.mly"
                                                                                   ( Block(List.rev _2))
# 1341 "src/parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 165 "src/parser.mly"
                      ( []     )
# 1347 "src/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 166 "src/parser.mly"
                      ( _2::_1 )
# 1355 "src/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 169 "src/parser.mly"
                        ( []     )
# 1361 "src/parser.ml"
               : 'elif_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'elif) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'elif_list) in
    Obj.repr(
# 170 "src/parser.mly"
                        ( _1::_2 )
# 1369 "src/parser.ml"
               : 'elif_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 173 "src/parser.mly"
                   ( _1 )
# 1376 "src/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 175 "src/parser.mly"
                ( ([], []) )
# 1382 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 176 "src/parser.mly"
              ( ((_2 :: fst _1), snd _1) )
# 1390 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 177 "src/parser.mly"
              ( (fst _1, (_2 :: snd _1)) )
# 1398 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 183 "src/parser.mly"
({ typ_name = _1;
   fname = _2;
   formals = List.rev _4;
   locals = List.rev _7;
   body = List.rev _8;
  })
# 1414 "src/parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 191 "src/parser.mly"
              ( [] )
# 1420 "src/parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 192 "src/parser.mly"
              ( _1 )
# 1427 "src/parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 195 "src/parser.mly"
                                ( [(_1,_2)]     )
# 1435 "src/parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ_decl) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 196 "src/parser.mly"
                                ( (_3,_4) :: _1 )
# 1444 "src/parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "src/parser.mly"
                   ( []       )
# 1450 "src/parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 200 "src/parser.mly"
                   ( _2 :: _1 )
# 1458 "src/parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 203 "src/parser.mly"
                        ( Vdecl ((_1, _2),Noexpr) )
# 1466 "src/parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 204 "src/parser.mly"
                                    ( Vdecl ((_1, _2),_4))
# 1475 "src/parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'spec_qual_list) in
    Obj.repr(
# 209 "src/parser.mly"
                     (_1)
# 1482 "src/parser.ml"
               : 'typ_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 212 "src/parser.mly"
          ( Int    )
# 1488 "src/parser.ml"
               : 'typ_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 213 "src/parser.mly"
          ( Bool   )
# 1494 "src/parser.ml"
               : 'typ_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 214 "src/parser.mly"
          ( Float  )
# 1500 "src/parser.ml"
               : 'typ_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 215 "src/parser.mly"
          ( Void   )
# 1506 "src/parser.ml"
               : 'typ_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "src/parser.mly"
          ( Char   )
# 1512 "src/parser.ml"
               : 'typ_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 217 "src/parser.mly"
          ( String )
# 1518 "src/parser.ml"
               : 'typ_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 220 "src/parser.mly"
          ( Prob )
# 1524 "src/parser.ml"
               : 'typ_qual))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "src/parser.mly"
          ( List )
# 1530 "src/parser.ml"
               : 'typ_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ_spec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'spec_qual_list_opt) in
    Obj.repr(
# 224 "src/parser.mly"
                              (_1::_2)
# 1538 "src/parser.ml"
               : 'spec_qual_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'spec_qual_list) in
    Obj.repr(
# 225 "src/parser.mly"
                          (_1::_2)
# 1546 "src/parser.ml"
               : 'spec_qual_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 228 "src/parser.mly"
                 ([])
# 1552 "src/parser.ml"
               : 'spec_qual_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'spec_qual_list) in
    Obj.repr(
# 229 "src/parser.mly"
                 (_1)
# 1559 "src/parser.ml"
               : 'spec_qual_list_opt))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
